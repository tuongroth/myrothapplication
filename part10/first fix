// App.js
import React, { useState } from 'react';
import { View, Text, FlatList, Button, StyleSheet, Alert, ScrollView } from 'react-native';
import { NavigationContainer } from '@react-navigation/native';
import { createNativeStackNavigator } from '@react-navigation/native-stack';
import Constants from 'expo-constants';
import { format } from 'date-fns';

const AppBar = () => {
  const styles = StyleSheet.create({
    container: {
      paddingTop: Constants.statusBarHeight,
      backgroundColor: '#24292e',
    },
    tab: {
      padding: 16,
      color: '#fff',
    },
    scrollView: {
      flexDirection: 'row',
    },
  });

  return (
    <View style={styles.container}>
      <ScrollView horizontal showsHorizontalScrollIndicator={false} style={styles.scrollView}>
        <Text style={styles.tab}>Repositories</Text>
        <Text style={styles.tab}>Sign In</Text>
        <Text style={styles.tab}>Another Tab</Text>
        <Text style={styles.tab}>More Tabs</Text>
        <Text style={styles.tab}>Extra Tab</Text>
        <Text style={styles.tab}>Final Tab</Text>
      </ScrollView>
    </View>
  );
};

const RepositoryInfo = ({ repository }) => {
  return (
    <View style={styles.header}>
      <Text style={styles.repoName}>{repository.name}</Text>
      <Text style={styles.repoDescription}>{repository.description}</Text>
      <Text style={styles.repoStats}>
        Stars: {repository.stars} | Forks: {repository.forks}
      </Text>
    </View>
  );
};

const ReviewItem = ({ review, onDelete, onView }) => {
  const formattedDate = format(new Date(review.createdAt), 'dd.MM.yyyy');

  return (
    <View style={styles.reviewItem}>
      <View style={styles.ratingContainer}>
        <Text style={styles.ratingText}>{review.rating}</Text>
      </View>
      <View style={styles.reviewContent}>
        <Text style={styles.userName}>{review.user.name}</Text>
        <Text style={styles.createdAt}>{formattedDate}</Text>
        <Text style={styles.reviewText}>{review.text}</Text>
      </View>
      <View style={styles.buttonContainer}>
        <Button title="View Repository" onPress={onView} />
        <Button title="Delete" onPress={onDelete} color="red" />
      </View>
    </View>
  );
};

const SingleRepository = () => {
  const [reviews, setReviews] = useState([
    {
      id: '1',
      user: { name: 'Alice' },
      rating: 90,
      text: 'Great library for mobile development!',
      createdAt: '2023-10-20',
    },
    {
      id: '2',
      user: { name: 'Bob' },
      rating: 85,
      text: 'Very useful, but some bugs need fixing.',
      createdAt: '2023-10-21',
    },
  ]);

  const repository = {
    name: 'React Native',
    description: 'A framework for building native apps using React.',
    stars: 12000,
    forks: 2000,
  };

  const handleDeleteReview = (reviewId) => {
    Alert.alert(
      'Confirm Deletion',
      'Are you sure you want to delete this review?',
      [
        { text: 'Cancel', style: 'cancel' },
        {
          text: 'Delete',
          onPress: () => {
            setReviews((prevReviews) => prevReviews.filter(review => review.id !== reviewId));
            console.log(`Deleted review with ID: ${reviewId}`);
          },
        },
      ]
    );
  };

  const handleViewRepository = () => {
    Alert.alert('View Repository', 'Navigating to repository details...');
  };

  return (
    <FlatList
      data={reviews}
      renderItem={({ item }) => (
        <ReviewItem 
          review={item} 
          onDelete={() => handleDeleteReview(item.id)} 
          onView={handleViewRepository}
        />
      )}
      keyExtractor={({ id }) => id}
      ListHeaderComponent={() => <RepositoryInfo repository={repository} />}
      ItemSeparatorComponent={() => <View style={styles.separator} />}
    />
  );
};

const Stack = createNativeStackNavigator();

const App = () => {
  return (
    <NavigationContainer>
      <AppBar />
      <Stack.Navigator initialRouteName="SingleRepository">
        <Stack.Screen 
          name="SingleRepository" 
          component={SingleRepository} 
          options={{ title: 'Repository Reviews' }} 
        />
      </Stack.Navigator>
    </NavigationContainer>
  );
};

// Styles for the component
const styles = StyleSheet.create({
  header: {
    padding: 16,
    backgroundColor: '#f8f8f8',
  },
  repoName: {
    fontSize: 24,
    fontWeight: 'bold',
  },
  repoDescription: {
    fontSize: 16,
    color: '#555',
  },
  repoStats: {
    fontSize: 14,
    color: '#777',
  },
  reviewItem: {
    flexDirection: 'column',
    padding: 16,
    backgroundColor: '#ffffff',
  },
  ratingContainer: {
    width: 40,
    height: 40,
    borderRadius: 20,
    backgroundColor: '#0366d6',
    alignItems: 'center',
    justifyContent: 'center',
    marginRight: 10,
  },
  ratingText: {
    color: '#ffffff',
    fontWeight: 'bold',
  },
  reviewContent: {
    flex: 1,
  },
  userName: {
    fontSize: 18,
    fontWeight: 'bold',
  },
  createdAt: {
    fontSize: 14,
    color: '#555',
  },
  reviewText: {
    fontSize: 16,
    color: '#333',
    marginTop: 4,
  },
  buttonContainer: {
    marginTop: 10,
    flexDirection: 'column',
    justifyContent: 'space-between',
  },
  separator: {
    height: 10,
    backgroundColor: '#eaeaea',
  },
});

// Export the App component
export default App;
