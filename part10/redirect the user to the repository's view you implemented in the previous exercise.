// App.js
import React, { useState, useEffect } from 'react';
import { StyleSheet, View, TextInput, Button, Text, FlatList, Alert } from 'react-native';
import { NavigationContainer } from '@react-navigation/native';
import { createNativeStackNavigator } from '@react-navigation/native-stack';
import axios from 'axios';

const Stack = createNativeStackNavigator();

const HomeScreen = ({ navigation }) => {
  // State for reviews
  const [reviews, setReviews] = useState([]);
  const [username, setUsername] = useState('');
  const [rating, setRating] = useState('');
  const [reviewText, setReviewText] = useState('');

  // Fetch reviews from the server
  const fetchReviews = async () => {
    try {
      const response = await axios.get('http://localhost:3000/reviews'); // Adjust for your backend
      setReviews(response.data);
    } catch (error) {
      console.error('Error fetching reviews:', error);
      Alert.alert('Error', 'Failed to fetch reviews');
    }
  };

  useEffect(() => {
    fetchReviews();
  }, []);

  // Handle adding a new review
  const handleAddReview = async () => {
    const newReview = {
      username,
      rating: parseInt(rating),
      reviewText,
    };

    try {
      const response = await axios.post('http://localhost:3000/reviews', newReview); // Adjust for your backend
      setReviews([...reviews, response.data]);
      setUsername('');
      setRating('');
      setReviewText('');
      Alert.alert('Success', 'Review added!', [
        { text: 'OK', onPress: () => navigation.navigate('RepositoryView') }, // Redirect after success
      ]);
    } catch (error) {
      console.error('Error adding review:', error);
      Alert.alert('Error', 'Failed to add review');
    }
  };

  return (
    <View style={styles.container}>
      <Text style={styles.title}>Add a Review</Text>
      <TextInput
        placeholder="Username"
        value={username}
        onChangeText={setUsername}
        style={styles.input}
      />
      <TextInput
        placeholder="Rating (1-5)"
        value={rating}
        onChangeText={setRating}
        keyboardType="numeric"
        style={styles.input}
      />
      <TextInput
        placeholder="Review Text"
        value={reviewText}
        onChangeText={setReviewText}
        style={styles.input}
      />
      <Button title="Add Review" onPress={handleAddReview} />

      <FlatList
        data={reviews}
        keyExtractor={(item) => item._id}
        renderItem={({ item }) => (
          <View style={styles.reviewContainer}>
            <Text>
              <strong>{item.username}</strong> - {item.rating}/5
            </Text>
            <Text>{item.reviewText}</Text>
          </View>
        )}
      />
    </View>
  );
};

const RepositoryView = () => {
  return (
    <View style={styles.container}>
      <Text style={styles.title}>Repository View</Text>
      <Text>This is where you would display repository details.</Text>
    </View>
  );
};

const App = () => {
  return (
    <NavigationContainer>
      <Stack.Navigator initialRouteName="Home">
        <Stack.Screen name="Home" component={HomeScreen} />
        <Stack.Screen name="RepositoryView" component={RepositoryView} />
      </Stack.Navigator>
    </NavigationContainer>
  );
};

const styles = StyleSheet.create({
  container: {
    padding: 20,
    flex: 1,
    backgroundColor: '#fff',
  },
  title: {
    fontSize: 24,
    fontWeight: 'bold',
    marginVertical: 10,
  },
  input: {
    borderBottomWidth: 1,
    marginBottom: 10,
    padding: 8,
  },
  reviewContainer: {
    marginVertical: 10,
    padding: 10,
    borderWidth: 1,
    borderColor: '#ccc',
    borderRadius: 5,
  },
});

export default App;
