import React from 'react';
import { View, Text, TextInput, Button, FlatList, StyleSheet, Pressable, ScrollView, Linking, Alert } from 'react-native';
import { NavigationContainer } from '@react-navigation/native';
import { createNativeStackNavigator } from '@react-navigation/native-stack';
import Constants from 'expo-constants';
import { ApolloProvider, useQuery, gql } from '@apollo/client';
import { ApolloClient, InMemoryCache } from '@apollo/client';

// Initialize Apollo Client
const client = new ApolloClient({
  uri: 'https://your-graphql-endpoint.com/graphql', // Replace with your GraphQL endpoint
  cache: new InMemoryCache(),
});

// Define GraphQL query to get repository and reviews
const GET_REPOSITORY = gql`
  query Repository($id: ID!) {
    repository(id: $id) {
      id
      fullName
      description
      stargazersCount
      forksCount
      url
      reviews {
        edges {
          node {
            id
            text
            rating
            createdAt
            user {
              id
              username
            }
          }
        }
      }
    }
  }
`;

// AppBar component
const AppBar = ({ navigation }) => (
  <View style={styles.appBar}>
    <ScrollView horizontal showsHorizontalScrollIndicator={false} style={styles.appBarScroll}>
      <Pressable onPress={() => navigation.navigate('RepositoryList')}>
        <Text style={styles.appBarTab}>Repositories</Text>
      </Pressable>
      <Pressable onPress={() => navigation.navigate('SignIn')}>
        <Text style={styles.appBarTab}>Sign In</Text>
      </Pressable>
      <Pressable onPress={() => navigation.navigate('CreateReview', { repositoryId: 1 })}>
        <Text style={styles.appBarTab}>Create a review</Text>
      </Pressable>
    </ScrollView>
  </View>
);

// CreateReview component
const CreateReview = ({ route, navigation }) => {
  const { repositoryId } = route.params;
  const [reviewText, setReviewText] = React.useState('');
  const [rating, setRating] = React.useState('');

  const handleSubmit = () => {
    console.log('Review submitted:', { reviewText, rating });
    Alert.alert('Review Submitted', 'Your review has been successfully submitted!');

    // Redirect to the RepositoryView screen to display the updated list of reviews
    navigation.navigate('RepositoryView', { repositoryId });
  };

  return (
    <View style={styles.container}>
      <Text style={styles.label}>Review</Text>
      <TextInput
        style={styles.input}
        placeholder="Write your review..."
        value={reviewText}
        onChangeText={setReviewText}
      />
      <Text style={styles.label}>Rating</Text>
      <TextInput
        style={styles.input}
        placeholder="Rating (0-100)"
        keyboardType="numeric"
        value={rating}
        onChangeText={setRating}
      />
      <Button title="Submit Review" onPress={handleSubmit} />
    </View>
  );
};

// RepositoryInfo Component
const RepositoryInfo = ({ repository }) => {
  const openGithub = () => {
    Linking.openURL(repository.url);
  };

  return (
    <View style={styles.repositoryContainer}>
      <Text style={styles.repoName}>{repository.fullName}</Text>
      <Text style={styles.repoDescription}>{repository.description}</Text>
      <Text style={styles.repoStats}>
        Stars: {repository.stargazersCount} | Forks: {repository.forksCount}
      </Text>
      <Pressable style={styles.githubButton} onPress={openGithub}>
        <Text style={styles.githubButtonText}>Open in GitHub</Text>
      </Pressable>
    </View>
  );
};

// RepositoryView Component
const RepositoryView = ({ route }) => {
  const { repositoryId } = route.params;
  const { loading, error, data } = useQuery(GET_REPOSITORY, { variables: { id: repositoryId } });

  if (loading) return <Text>Loading...</Text>;
  if (error) return <Text>Error: {error.message}</Text>;

  const repository = data.repository;

  return (
    <View>
      <RepositoryInfo repository={repository} />
      <FlatList
        data={repository.reviews.edges}
        keyExtractor={(item) => item.node.id}
        renderItem={({ item }) => (
          <View style={styles.reviewContainer}>
            <Text style={styles.reviewText}>{item.node.text}</Text>
            <Text>Rating: {item.node.rating}</Text>
            <Text>By: {item.node.user.username}</Text>
          </View>
        )}
      />
    </View>
  );
};

// Main app component
const Stack = createNativeStackNavigator();

const App = () => (
  <ApolloProvider client={client}>
    <NavigationContainer>
      <Stack.Navigator initialRouteName="RepositoryList">
        <Stack.Screen
          name="RepositoryList"
          component={RepositoryList}
          options={({ navigation }) => ({
            header: () => <AppBar navigation={navigation} />,
          })}
        />
        <Stack.Screen
          name="RepositoryView"
          component={RepositoryView}
          options={{ title: 'Repository Details' }}
        />
        <Stack.Screen
          name="CreateReview"
          component={CreateReview}
          options={{ title: 'Create a Review' }}
        />
      </Stack.Navigator>
    </NavigationContainer>
  </ApolloProvider>
);

// Styles for components
const styles = StyleSheet.create({
  appBar: { paddingTop: Constants.statusBarHeight, backgroundColor: '#24292e' },
  appBarScroll: { flexDirection: 'row' },
  appBarTab: { color: '#ffffff', padding: 16 },
  container: { padding: 16 },
  label: { fontSize: 18, marginBottom: 8 },
  input: { borderWidth: 1, borderColor: '#ccc', padding: 10, marginBottom: 16, borderRadius: 5 },
  repositoryContainer: { padding: 16, backgroundColor: '#f8f8f8' },
  repoName: { fontSize: 20, fontWeight: 'bold' },
  repoDescription: { fontSize: 16, color: '#555' },
  repoStats: { fontSize: 14, color: '#777' },
  githubButton: { marginTop: 10, backgroundColor: '#0366d6', padding: 10, borderRadius: 5, alignItems: 'center' },
  githubButtonText: { color: '#fff', fontWeight: 'bold' },
  reviewContainer: { padding: 10, borderBottomWidth: 1, borderBottomColor: '#ddd' },
  reviewText: { fontSize: 16 },
});

export default App;

