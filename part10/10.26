import React, { useEffect, useState } from 'react';
import { View, Text, Button, FlatList, Alert, StyleSheet } from 'react-native';
import { ApolloProvider, ApolloClient, InMemoryCache, gql, useQuery, useMutation } from '@apollo/client';
import { NavigationContainer } from '@react-navigation/native';
import { createNativeStackNavigator } from '@react-navigation/native-stack';

// Create an Apollo Client
const client = new ApolloClient({
  uri: 'https://your-graphql-endpoint.com/graphql', // Replace with your GraphQL endpoint
  cache: new InMemoryCache(),
});

// Define GraphQL queries and mutations
const GET_CURRENT_USER = gql`
  query getCurrentUser($includeReviews: Boolean = true, $after: String) {
    me {
      id
      username
      reviews(after: $after) {
        edges {
          node {
            id
            text
            rating
            createdAt
            repository {
              id
              fullName
            }
          }
          cursor
        }
        pageInfo {
          endCursor
          hasNextPage
        }
      }
    }
  }
`;

const DELETE_REVIEW = gql`
  mutation deleteReview($id: ID!) {
    deleteReview(id: $id) {
      id
    }
  }
`;

// Create a stack navigator
const Stack = createNativeStackNavigator();

// MyReviews component to display user reviews
const MyReviews = ({ navigation }) => {
  const [after, setAfter] = useState(null);
  const { data, loading, error, fetchMore, refetch } = useQuery(GET_CURRENT_USER, {
    variables: { includeReviews: true, after },
  });

  const [deleteReview] = useMutation(DELETE_REVIEW, {
    onCompleted: () => refetch(), // Refetch reviews after deletion
  });

  const handleDelete = (id) => {
    Alert.alert(
      'Confirm Deletion',
      'Are you sure you want to delete this review?',
      [
        {
          text: 'Cancel',
          style: 'cancel',
        },
        {
          text: 'OK',
          onPress: () => deleteReview({ variables: { id } }),
        },
      ],
      { cancelable: false }
    );
  };

  const loadMoreReviews = () => {
    if (data?.me?.reviews?.pageInfo.hasNextPage) {
      setAfter(data.me.reviews.pageInfo.endCursor);
    }
  };

  if (loading) return <Text>Loading...</Text>;
  if (error) return <Text>Error: {error.message}</Text>;

  const reviews = data.me.reviews.edges;

  return (
    <View style={styles.container}>
      <FlatList
        data={reviews}
        keyExtractor={(item) => item.node.id}
        renderItem={({ item }) => (
          <View style={styles.reviewContainer}>
            <Text style={styles.reviewText}>{item.node.text}</Text>
            <Text style={styles.reviewRating}>Rating: {item.node.rating}</Text>
            <Text style={styles.reviewDate}>
              {new Date(item.node.createdAt).toLocaleDateString()}
            </Text>
            <View style={styles.buttonContainer}>
              <Button
                title="View Repository"
                onPress={() => navigation.navigate('Repository', { repoId: item.node.repository.id })}
              />
              <Button
                title="Delete Review"
                onPress={() => handleDelete(item.node.id)}
              />
            </View>
          </View>
        )}
        onEndReached={loadMoreReviews} // Load more reviews when the end is reached
        onEndReachedThreshold={0.1} // Adjust threshold as necessary
      />
      {data.me.reviews.pageInfo.hasNextPage && (
        <Button title="Load More" onPress={loadMoreReviews} />
      )}
    </View>
  );
};

// Placeholder Repository component for navigation
const Repository = ({ route }) => {
  const { repoId } = route.params;

  // Fetch repository details using repoId here (not implemented)

  return (
    <View style={styles.container}>
      <Text>Repository ID: {repoId}</Text>
      {/* Add repository details display here */}
    </View>
  );
};

// App component with ApolloProvider and NavigationContainer
const App = () => {
  return (
    <ApolloProvider client={client}>
      <NavigationContainer>
        <Stack.Navigator initialRouteName="MyReviews">
          <Stack.Screen name="MyReviews" component={MyReviews} />
          <Stack.Screen name="Repository" component={Repository} />
        </Stack.Navigator>
      </NavigationContainer>
    </ApolloProvider>
  );
};

// Styles for the components
const styles = StyleSheet.create({
  container: {
    flex: 1,
    padding: 20,
  },
  reviewContainer: {
    padding: 10,
    borderBottomWidth: 1,
    borderBottomColor: '#ccc',
  },
  reviewText: {
    fontSize: 16,
  },
  reviewRating: {
    fontSize: 14,
    color: 'gray',
  },
  reviewDate: {
    fontSize: 12,
    color: 'lightgray',
  },
  buttonContainer: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    marginTop: 10,
  },
});

export default App;
