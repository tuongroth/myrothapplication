import React, { useContext, useState, createContext } from 'react';
import { View, Text, FlatList, StyleSheet, ActivityIndicator } from 'react-native';
import { NavigationContainer } from '@react-navigation/native';
import { createBottomTabNavigator } from '@react-navigation/bottom-tabs';
import { ApolloClient, InMemoryCache, ApolloProvider, gql, useQuery } from '@apollo/client';
import { format } from 'date-fns';

// Initialize Apollo Client
const client = new ApolloClient({
  uri: 'https://your-api-endpoint/graphql', // Replace with your actual GraphQL API endpoint
  cache: new InMemoryCache(),
});

// Mock Authentication Context
const AuthContext = createContext();

// GraphQL Query to Fetch Current User with Reviews
const GET_CURRENT_USER = gql`
  query getCurrentUser($includeReviews: Boolean = false) {
    me {
      id
      username
      reviews @include(if: $includeReviews) {
        edges {
          node {
            id
            text
            rating
            createdAt
            repository {
              fullName
            }
          }
        }
      }
    }
  }
`;

// My Reviews Component
const MyReviews = () => {
  const { data, loading, error } = useQuery(GET_CURRENT_USER, {
    variables: { includeReviews: true },
    fetchPolicy: 'cache-and-network',
  });

  if (loading) return <ActivityIndicator />;
  if (error) return <Text>Error loading reviews</Text>;

  const reviews = data?.me?.reviews?.edges?.map(edge => edge.node) || [];

  return (
    <FlatList
      data={reviews}
      renderItem={({ item }) => (
        <View style={styles.reviewItem}>
          <Text style={styles.repoName}>{item.repository.fullName}</Text>
          <Text style={styles.rating}>Rating: {item.rating}</Text>
          <Text style={styles.date}>
            {format(new Date(item.createdAt), 'dd.MM.yyyy')}
          </Text>
          <Text>{item.text}</Text>
        </View>
      )}
      keyExtractor={({ id }) => id}
      ItemSeparatorComponent={() => <View style={styles.separator} />}
    />
  );
};

// Home Component
const Home = () => (
  <View style={styles.centered}>
    <Text>Welcome to the Home Page</Text>
  </View>
);

// Tab Navigator
const Tab = createBottomTabNavigator();
const TabNavigator = () => {
  const { isAuthenticated } = useContext(AuthContext);

  return (
    <Tab.Navigator>
      <Tab.Screen name="Home" component={Home} />
      {isAuthenticated && <Tab.Screen name="My Reviews" component={MyReviews} />}
    </Tab.Navigator>
  );
};

// Main App Component
const App = () => {
  const [isAuthenticated, setIsAuthenticated] = useState(true); // Mock auth state
  const authContextValue = { isAuthenticated, setIsAuthenticated };

  return (
    <ApolloProvider client={client}>
      <AuthContext.Provider value={authContextValue}>
        <NavigationContainer>
          <TabNavigator />
        </NavigationContainer>
      </AuthContext.Provider>
    </ApolloProvider>
  );
};

// Styles
const styles = StyleSheet.create({
  centered: {
    flex: 1,
    justifyContent: 'center',
    alignItems: 'center',
  },
  reviewItem: {
    padding: 15,
    backgroundColor: '#fff',
  },
  repoName: {
    fontSize: 16,
    fontWeight: 'bold',
    marginBottom: 5,
  },
  rating: {
    color: '#0366d6',
    marginBottom: 5,
  },
  date: {
    color: '#888',
    marginBottom: 5,
  },
  separator: {
    height: 10,
    backgroundColor: '#f0f0f0',
  },
});

export default App;
