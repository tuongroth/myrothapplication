import React, { useState } from 'react';
import { View, TextInput, Button, StyleSheet, Text, FlatList, Alert } from 'react-native';
import { ApolloClient, InMemoryCache, ApolloProvider, useQuery, gql, useMutation } from '@apollo/client';
import { NavigationContainer } from '@react-navigation/native';
import { createBottomTabNavigator } from '@react-navigation/bottom-tabs';
import { useDebounce } from 'use-debounce';
import { Linking } from 'expo';

// Initialize Apollo Client
const client = new ApolloClient({
  uri: 'https://your-graphql-endpoint.com/graphql', // Replace with your actual GraphQL endpoint
  cache: new InMemoryCache(),
});

// GraphQL Queries
const GET_REPOSITORIES = gql`
  query GetRepositories($searchKeyword: String) {
    repositories(searchKeyword: $searchKeyword) {
      edges {
        node {
          id
          fullName
          url
          reviews {
            edges {
              node {
                id
                text
                rating
                createdAt
                user {
                  username
                }
              }
            }
          }
        }
      }
    }
  }
`;

const GET_CURRENT_USER = gql`
  query getCurrentUser($includeReviews: Boolean = false) {
    me {
      id
      username
      reviews @include(if: $includeReviews) {
        edges {
          node {
            id
            text
            rating
            createdAt
            repository {
              fullName
              url
            }
          }
        }
      }
    }
  }
`;

const DELETE_REVIEW = gql`
  mutation deleteReview($id: ID!) {
    deleteReview(id: $id) {
      id
    }
  }
`;

const RepositoryList = () => {
  const [searchKeyword, setSearchKeyword] = useState('');
  const [debouncedSearch] = useDebounce(searchKeyword, 500);
  const { loading, error, data } = useQuery(GET_REPOSITORIES, {
    variables: { searchKeyword: debouncedSearch },
  });

  if (loading) return <Text>Loading...</Text>;
  if (error) return <Text>Error: {error.message}</Text>;

  const repositories = data.repositories.edges;

  return (
    <View style={styles.container}>
      <TextInput
        style={styles.input}
        placeholder="Search repositories..."
        value={searchKeyword}
        onChangeText={setSearchKeyword}
      />
      <FlatList
        data={repositories}
        keyExtractor={({ node }) => node.id}
        renderItem={({ item }) => (
          <View style={styles.repositoryItem}>
            <Text>{item.node.fullName}</Text>
            <Button title="View" onPress={() => Linking.openURL(item.node.url)} />
          </View>
        )}
      />
    </View>
  );
};

const MyReviews = () => {
  const { loading, error, data } = useQuery(GET_CURRENT_USER, {
    variables: { includeReviews: true },
  });

  const [deleteReview] = useMutation(DELETE_REVIEW, {
    update(cache, { data: { deleteReview } }) {
      cache.modify({
        fields: {
          me(existingReviews = []) {
            return existingReviews.filter(review => review.id !== deleteReview.id);
          },
        },
      });
    },
  });

  if (loading) return <Text>Loading...</Text>;
  if (error) return <Text>Error: {error.message}</Text>;

  const reviews = data.me.reviews.edges;

  const handleDelete = (id) => {
    Alert.alert(
      "Delete Review",
      "Are you sure you want to delete this review?",
      [
        { text: "Cancel", style: "cancel" },
        { text: "OK", onPress: () => deleteReview({ variables: { id } }) },
      ]
    );
  };

  return (
    <View style={styles.container}>
      <FlatList
        data={reviews}
        keyExtractor={({ node }) => node.id}
        renderItem={({ item }) => (
          <View style={styles.reviewItem}>
            <Text>{item.node.text} ({item.node.rating})</Text>
            <Text onPress={() => Linking.openURL(item.node.repository.url)}>{item.node.repository.fullName}</Text>
            <Button title="Delete" onPress={() => handleDelete(item.node.id)} />
          </View>
        )}
      />
    </View>
  );
};

// Navigation Setup
const Tab = createBottomTabNavigator();

const App = () => {
  return (
    <ApolloProvider client={client}>
      <NavigationContainer>
        <Tab.Navigator>
          <Tab.Screen name="Repositories" component={RepositoryList} />
          <Tab.Screen name="My Reviews" component={MyReviews} />
        </Tab.Navigator>
      </NavigationContainer>
    </ApolloProvider>
  );
};

const styles = StyleSheet.create({
  container: {
    flex: 1,
    padding: 20,
    backgroundColor: '#fff',
  },
  input: {
    height: 40,
    borderColor: 'gray',
    borderWidth: 1,
    marginBottom: 10,
    paddingHorizontal: 10,
  },
  repositoryItem: {
    padding: 10,
    borderBottomWidth: 1,
    borderBottomColor: '#ccc',
  },
  reviewItem: {
    padding: 10,
    borderBottomWidth: 1,
    borderBottomColor: '#eee',
  },
});

export default App;
