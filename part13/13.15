const express = require('express');
const jwt = require('jsonwebtoken');
const { Sequelize, DataTypes, Model } = require('sequelize');
const bcrypt = require('bcrypt');
const app = express();

app.use(express.json());

const SECRET = 'YOUR_SECRET_KEY'; // Add your secret here
const PORT = 3000;

// Database setup (change as per your actual DB settings)
const sequelize = new Sequelize('sqlite::memory:', { logging: false });

class User extends Model {}

User.init({
  id: {
    type: DataTypes.INTEGER,
    primaryKey: true,
    autoIncrement: true,
  },
  username: {
    type: DataTypes.STRING,
    unique: true,
    allowNull: false,
    validate: {
      isEmail: true, // Added email validation for the username field
    },
  },
  passwordHash: {
    type: DataTypes.STRING,
    allowNull: false,
  },
}, {
  sequelize,
  timestamps: true,
  modelName: 'user',
});

class Blog extends Model {}

Blog.init({
  id: {
    type: DataTypes.INTEGER,
    primaryKey: true,
    autoIncrement: true,
  },
  title: {
    type: DataTypes.STRING,
    allowNull: false,
  },
  author: {
    type: DataTypes.STRING,
    allowNull: false,
  },
  likes: {
    type: DataTypes.INTEGER,
    defaultValue: 0,
  },
  userId: {
    type: DataTypes.INTEGER,
    allowNull: false,
    references: {
      model: User,
      key: 'id',
    },
  },
}, {
  sequelize,
  timestamps: true,
  modelName: 'blog',
});

User.hasMany(Blog);
Blog.belongsTo(User);

sequelize.sync();

// Error Handling Middleware
app.use((err, req, res, next) => {
  if (err.name === 'SequelizeValidationError') {
    return res.status(400).json({ error: err.errors.map(e => e.message) });
  }
  next(err);
});

// Token extractor middleware
const tokenExtractor = (req, res, next) => {
  const authorization = req.get('authorization');
  if (authorization && authorization.toLowerCase().startsWith('bearer ')) {
    try {
      req.decodedToken = jwt.verify(authorization.substring(7), SECRET);
    } catch {
      return res.status(401).json({ error: 'token invalid' });
    }
  } else {
    return res.status(401).json({ error: 'token missing' });
  }
  next();
};

// Route for user registration
app.post('/api/users', async (req, res) => {
  const { username, password } = req.body;
  const saltRounds = 10;
  const passwordHash = await bcrypt.hash(password, saltRounds);
  try {
    const user = await User.create({ username, passwordHash });
    res.status(201).json(user);
  } catch (error) {
    res.status(400).json({ error: 'Username must be a valid email' });
  }
});

// Route for login
app.post('/api/login', async (req, res) => {
  const { username, password } = req.body;
  const user = await User.findOne({ where: { username } });

  const passwordCorrect = user === null
    ? false
    : await bcrypt.compare(password, user.passwordHash);

  if (!(user && passwordCorrect)) {
    return res.status(401).json({
      error: 'invalid username or password',
    });
  }

  const userForToken = {
    username: user.username,
    id: user.id,
  };

  const token = jwt.sign(userForToken, SECRET);

  res
    .status(200)
    .send({ token, username: user.username, name: user.name });
});

// Route for adding a blog (token required)
app.post('/api/blogs', tokenExtractor, async (req, res) => {
  const { title, author, likes } = req.body;

  const user = await User.findByPk(req.decodedToken.id);
  if (!user) {
    return res.status(400).json({ error: 'User not found' });
  }

  const blog = await Blog.create({ title, author, likes, userId: user.id });
  res.status(201).json(blog);
});

// Route for getting all blogs, ordered by likes
app.get('/api/blogs', async (req, res) => {
  const blogs = await Blog.findAll({
    include: {
      model: User,
      attributes: ['username'],
    },
    order: [['likes', 'DESC']],
  });
  res.json(blogs);
});

// Start server
app.listen(PORT, () => {
  console.log(`Server running on port ${PORT}`);
});
