const express = require('express');
const { Sequelize, DataTypes, Model } = require('sequelize');
const jwt = require('jsonwebtoken');
const bcrypt = require('bcrypt');

// Initialize the app and database connection
const app = express();
app.use(express.json());

const sequelize = new Sequelize('sqlite::memory:'); // In-memory SQLite for demo purposes

const SECRET = 'your_jwt_secret_key';  // Replace with your actual secret in production

// Define the User model
class User extends Model {}
User.init({
  username: {
    type: DataTypes.STRING,
    allowNull: false,
    unique: true
  },
  name: {
    type: DataTypes.STRING,
    allowNull: false
  },
  password: {
    type: DataTypes.STRING,
    allowNull: false
  },
  disabled: {
    type: DataTypes.BOOLEAN,
    defaultValue: false,
  }
}, { sequelize, modelName: 'user' });

// Define the Blog model
class Blog extends Model {}
Blog.init({
  title: {
    type: DataTypes.STRING,
    allowNull: false
  },
  author: {
    type: DataTypes.STRING,
    allowNull: false
  },
  url: {
    type: DataTypes.STRING,
    allowNull: false
  },
  likes: {
    type: DataTypes.INTEGER,
    defaultValue: 0
  },
  year: {
    type: DataTypes.INTEGER,
    allowNull: true
  }
}, { sequelize, modelName: 'blog' });

// Define the Session model
class Session extends Model {}
Session.init({
  userId: {
    type: DataTypes.INTEGER,
    references: {
      model: User,
      key: 'id',
    },
  },
  token: {
    type: DataTypes.STRING,
    allowNull: false,
    unique: true,
  }
}, { sequelize, modelName: 'session' });

// Define associations
User.hasMany(Session);
Session.belongsTo(User);

// Sync the database
sequelize.sync();

// Middleware to verify session token
const verifySession = async (req, res, next) => {
  const token = req.headers['authorization']?.split(' ')[1];

  if (!token) {
    return res.status(401).json({ error: 'Token missing or invalid' });
  }

  try {
    const decoded = jwt.verify(token, SECRET);
    const session = await Session.findOne({ where: { token } });
    const user = await User.findByPk(decoded.id);

    if (!session || !user || user.disabled) {
      return res.status(403).json({ error: 'Access denied' });
    }

    req.user = user; // Attach user info to request
    next();
  } catch (err) {
    return res.status(403).json({ error: 'Invalid token' });
  }
};

// Route for user registration (for demo purposes)
app.post('/api/register', async (req, res) => {
  const { username, name, password } = req.body;
  const hashedPassword = await bcrypt.hash(password, 10);

  try {
    const newUser = await User.create({ username, name, password: hashedPassword });
    res.status(201).json(newUser);
  } catch (error) {
    res.status(400).json({ error: 'User registration failed' });
  }
});

// Route for user login
app.post('/api/login', async (req, res) => {
  const { username, password } = req.body;

  const user = await User.findOne({ where: { username } });
  
  if (!user || !(await bcrypt.compare(password, user.password)) || user.disabled) {
    return res.status(401).json({ error: 'Invalid username or password' });
  }

  // Create session
  const token = jwt.sign({ id: user.id }, SECRET);
  await Session.create({ userId: user.id, token });

  res.json({ token });
});

// Route for user logout
app.delete('/api/logout', verifySession, async (req, res) => {
  await Session.destroy({ where: { userId: req.user.id } });
  res.status(204).end();
});

// Example protected route
app.get('/api/protected', verifySession, (req, res) => {
  res.json({ message: `Hello ${req.user.name}, you have access!` });
});

// Route to disable a user (for demo purposes)
app.patch('/api/users/:id/disable', async (req, res) => {
  const { id } = req.params;

  try {
    const user = await User.findByPk(id);
    if (!user) {
      return res.status(404).json({ error: 'User not found' });
    }
    user.disabled = true;
    await user.save();
    res.status(200).json({ message: 'User disabled' });
  } catch (error) {
    res.status(500).json({ error: 'Failed to disable user' });
  }
});

// Start the server
const PORT = 3001;
app.listen(PORT, () => {
  console.log(`Server running on port ${PORT}`);
});
