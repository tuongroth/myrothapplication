// app.js

const express = require('express');
const Sequelize = require('sequelize');

// Replace this with your actual database connection string
const DATABASE_URL = 'sqlite::memory:';

// Initialize Sequelize
const sequelize = new Sequelize(DATABASE_URL);

// Initialize Express
const app = express();
app.use(express.json()); // Middleware to parse JSON request bodies

// Define the Blog model
const Blog = sequelize.define('blog', {
  id: {
    type: Sequelize.INTEGER,
    primaryKey: true,
    autoIncrement: true,
  },
  title: {
    type: Sequelize.STRING,
    allowNull: false,
  },
  content: {
    type: Sequelize.TEXT,
    allowNull: false,
  },
  year: {
    type: Sequelize.INTEGER,
    allowNull: false,
    validate: {
      min: {
        args: 1991,
        msg: 'Year must be at least 1991',
      },
      max: {
        args: new Date().getFullYear(),
        msg: `Year must not be greater than ${new Date().getFullYear()}`,
      },
    },
  },
  created_at: {
    type: Sequelize.DATE,
    allowNull: false,
    defaultValue: Sequelize.NOW,
  },
  updated_at: {
    type: Sequelize.DATE,
    allowNull: false,
    defaultValue: Sequelize.NOW,
  },
});

// Initialize the database and create tables
const initializeDatabase = async () => {
  await sequelize.authenticate();
  
  // Create blogs table
  await sequelize.getQueryInterface().createTable('blogs', Blog.rawAttributes);

  console.log('Database initialized with blogs table');
};

// Fetch all blogs
app.get('/api/blogs', async (req, res) => {
  const blogs = await Blog.findAll();
  res.json(blogs);
});

// Create a new blog
app.post('/api/blogs', async (req, res) => {
  try {
    const { title, content, year } = req.body;
    const blog = await Blog.create({ title, content, year });
    res.status(201).json(blog);
  } catch (error) {
    if (error.name === 'SequelizeValidationError') {
      return res.status(400).json({ error: error.errors.map(e => e.message) });
    }
    res.status(500).json({ error: 'Something went wrong' });
  }
});

// Connect to the database and run migrations
const connectToDatabase = async () => {
  try {
    await initializeDatabase();
    console.log('Connected to the database and initialized tables');
    
    // Start the Express server
    app.listen(3001, () => {
      console.log('Server running on port 3001');
    });
  } catch (err) {
    console.error('Failed to connect to the database', err);
    process.exit(1);
  }
};

// Run the application
connectToDatabase();
