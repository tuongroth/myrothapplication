const express = require('express');
const { Sequelize, DataTypes, Model } = require('sequelize');
const jwt = require('jsonwebtoken');

// Initialize the app and database connection
const app = express();
app.use(express.json());

const sequelize = new Sequelize('sqlite::memory:'); // In-memory SQLite for demo purposes

// Secret for JWT token (replace with your actual secret in production)
const SECRET = 'your_jwt_secret_key';

// Directly embedded token (hardcoded)
const HARDCODED_TOKEN = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VybmFtZSI6Imx5bngiLCJpZCI6MiwiaWF0IjoxNjMzOTYxOTY4fQ.176gUskMbCEo02QMxqZjFlymzv_GQtIQajHCbXJVX1Q';

// Define the User model
class User extends Model {}
User.init({
  username: {
    type: DataTypes.STRING,
    allowNull: false
  },
  name: {
    type: DataTypes.STRING,
    allowNull: false
  }
}, { sequelize, modelName: 'user' });

// Define the Note model
class Note extends Model {}
Note.init({
  content: {
    type: DataTypes.STRING,
    allowNull: false
  },
  important: {
    type: DataTypes.BOOLEAN,
    defaultValue: false
  }
}, { sequelize, modelName: 'note' });

// Associate notes with users
User.hasMany(Note);
Note.belongsTo(User);

// Sync the database
sequelize.sync();

// Middleware to verify the hardcoded token
const verifyHardcodedToken = (req, res, next) => {
  // Simulate token being passed in the request
  const token = HARDCODED_TOKEN;

  if (!token) {
    return res.status(401).json({ error: 'Token missing or invalid' });
  }

  jwt.verify(token, SECRET, (err, decodedToken) => {
    if (err) {
      return res.status(403).json({ error: 'Invalid token' });
    }

    req.user = decodedToken; // Set decoded user data from token
    next();
  });
};

// POST route to create a new note (using hardcoded token)
app.post('/api/notes', verifyHardcodedToken, async (req, res) => {
  const { content, important } = req.body;

  if (!content) {
    return res.status(400).json({ error: 'Content is required' });
  }

  try {
    // Get the authenticated user's ID from the decoded token
    const user = await User.findByPk(req.user.id);

    if (!user) {
      return res.status(404).json({ error: 'User not found' });
    }

    // Create a new note linked to the user
    const note = await Note.create({
      content,
      important: important || false,
      userId: user.id
    });

    res.status(201).json(note);
  } catch (error) {
    res.status(500).json({ error: 'Failed to create note' });
  }
});

// Start the server
const PORT = 3000;
app.listen(PORT, () => {
  console.log(`Server running on port ${PORT}`);
});
