// Complete implementation for reading list feature with migrations, models, and routes

const express = require('express');
const { Sequelize, DataTypes, Model } = require('sequelize');
const { Umzug, SequelizeStorage } = require('umzug');

// Setup Sequelize
const sequelize = new Sequelize('sqlite::memory:'); // Replace with your database URL

// Migration setup
const umzug = new Umzug({
  migrations: {
    glob: 'migrations/*.js',
  },
  storage: new SequelizeStorage({ sequelize }),
  context: sequelize.getQueryInterface(),
  logger: console,
});

// Migration file creation
const createMigrations = async () => {
  await sequelize.sync({ force: true }); // For development, drops existing tables

  await sequelize.getQueryInterface().createTable('blogs', {
    id: {
      type: DataTypes.INTEGER,
      primaryKey: true,
      autoIncrement: true,
    },
    title: {
      type: DataTypes.STRING,
      allowNull: false,
    },
    content: {
      type: DataTypes.TEXT,
      allowNull: false,
    },
  });

  await sequelize.getQueryInterface().createTable('reading_lists', {
    id: {
      type: DataTypes.INTEGER,
      primaryKey: true,
      autoIncrement: true,
    },
    blog_id: {
      type: DataTypes.INTEGER,
      allowNull: false,
      references: { model: 'blogs', key: 'id' },
    },
    user_id: {
      type: DataTypes.INTEGER,
      allowNull: false,
      references: { model: 'users', key: 'id' },
    },
    status: {
      type: DataTypes.ENUM('unread', 'read'),
      allowNull: false,
      defaultValue: 'unread',
    },
  });
};

// Models
class User extends Model {}
User.init(
  {
    id: {
      type: DataTypes.INTEGER,
      primaryKey: true,
      autoIncrement: true,
    },
    username: {
      type: DataTypes.STRING,
      allowNull: false,
    },
  },
  { sequelize, modelName: 'user' }
);

class Blog extends Model {}
Blog.init(
  {
    id: {
      type: DataTypes.INTEGER,
      primaryKey: true,
      autoIncrement: true,
    },
    title: {
      type: DataTypes.STRING,
      allowNull: false,
    },
    content: {
      type: DataTypes.TEXT,
      allowNull: false,
    },
  },
  { sequelize, modelName: 'blog' }
);

class ReadingList extends Model {}
ReadingList.init(
  {
    id: {
      type: DataTypes.INTEGER,
      primaryKey: true,
      autoIncrement: true,
    },
    userId: {
      type: DataTypes.INTEGER,
      allowNull: false,
      references: { model: User, key: 'id' },
    },
    blogId: {
      type: DataTypes.INTEGER,
      allowNull: false,
      references: { model: Blog, key: 'id' },
    },
    status: {
      type: DataTypes.ENUM('unread', 'read'),
      allowNull: false,
      defaultValue: 'unread',
    },
  },
  { sequelize, modelName: 'reading_list' }
);

// Associations
User.belongsToMany(Blog, { through: ReadingList });
Blog.belongsToMany(User, { through: ReadingList });

// Express app
const app = express();
app.use(express.json());

// Add blog to reading list
app.post('/reading-lists', async (req, res) => {
  const { userId, blogId } = req.body;

  try {
    const readingListEntry = await ReadingList.create({
      userId,
      blogId,
    });
    res.status(201).json(readingListEntry);
  } catch (error) {
    res.status(400).json({ error: error.message });
  }
});

// Get user's reading list
app.get('/reading-lists/:userId', async (req, res) => {
  const { userId } = req.params;

  try {
    const readingList = await ReadingList.findAll({
      where: { userId },
      include: Blog,
    });
    res.json(readingList);
  } catch (error) {
    res.status(500).json({ error: error.message });
  }
});

// Start server and create migrations
const startServer = async () => {
  await createMigrations();
  await sequelize.sync();

  app.listen(3001, () => {
    console.log('Server running on port 3001');
  });
};

startServer();
