require('dotenv').config()
const express = require('express')
const { Sequelize, Model, DataTypes, ValidationError } = require('sequelize')
const jwt = require('jsonwebtoken')

const app = express()
app.use(express.json())

// 1. Configuration
const PORT = process.env.PORT || 3001
const SECRET = 'your_secret_key_here' // Use your actual secret key
const DATABASE_URL = process.env.DATABASE_URL || 'sqlite://memory'

// 2. Database connection
const sequelize = new Sequelize(DATABASE_URL)

const connectToDatabase = async () => {
  try {
    await sequelize.authenticate()
    console.log('Connected to the database')
  } catch (err) {
    console.error('Failed to connect to the database:', err)
    process.exit(1)
  }
}

// 3. Define Note and User models
class Note extends Model {}
Note.init({
  id: {
    type: DataTypes.INTEGER,
    primaryKey: true,
    autoIncrement: true
  },
  content: {
    type: DataTypes.TEXT,
    allowNull: false
  },
  important: {
    type: DataTypes.BOOLEAN
  },
  date: {
    type: DataTypes.DATE,
    defaultValue: DataTypes.NOW
  }
}, {
  sequelize,
  underscored: true,
  timestamps: false,
  modelName: 'note'
})

class User extends Model {}
User.init({
  id: {
    type: DataTypes.INTEGER,
    primaryKey: true,
    autoIncrement: true
  },
  username: {
    type: DataTypes.STRING,
    unique: true,
    allowNull: false,
    validate: {
      isEmail: { msg: 'Username must be a valid email' } // Validation to check for email format
    }
  },
  name: {
    type: DataTypes.STRING,
    allowNull: false
  }
}, {
  sequelize,
  underscored: true,
  timestamps: true,
  modelName: 'user'
})

// Sync models and define associations
User.hasMany(Note)
Note.belongsTo(User)
Note.sync({ alter: true })
User.sync({ alter: true })

// 4. Token extractor middleware
const tokenExtractor = (req, res, next) => {
  const authorization = req.get('authorization')
  if (authorization && authorization.toLowerCase().startsWith('bearer ')) {
    try {
      req.decodedToken = jwt.verify(authorization.substring(7), SECRET)
    } catch {
      return res.status(401).json({ error: 'token invalid' })
    }
  } else {
    return res.status(401).json({ error: 'token missing' })
  }
  next()
}

// 5. Error handling middleware
const errorHandler = (err, req, res, next) => {
  if (err instanceof ValidationError) {
    return res.status(400).json({ error: err.errors.map(e => e.message) })
  }
  next(err)
}

// 6. Routes

// Notes routes
app.get('/api/notes', async (req, res) => {
  const notes = await Note.findAll({
    attributes: { exclude: ['userId'] },
    include: {
      model: User,
      attributes: ['name']
    }
  })
  res.json(notes)
})

app.post('/api/notes', tokenExtractor, async (req, res) => {
  const user = await User.findByPk(req.decodedToken.id)
  const note = await Note.create({
    ...req.body,
    userId: user.id,
    date: new Date()
  })
  res.json(note)
})

// Users routes
app.get('/api/users', async (req, res) => {
  const users = await User.findAll({
    include: {
      model: Note,
      attributes: { exclude: ['userId'] }
    }
  })
  res.json(users)
})

app.post('/api/users', async (req, res, next) => {
  try {
    const user = await User.create(req.body)
    res.json(user)
  } catch (error) {
    next(error)
  }
})

app.put('/api/users/:username', async (req, res, next) => {
  try {
    const user = await User.findOne({
      where: { username: req.params.username }
    })
    if (user) {
      user.username = req.body.username
      await user.save()
      res.json(user)
    } else {
      res.status(404).json({ error: 'User not found' })
    }
  } catch (error) {
    next(error)
  }
})

// Login route
app.post('/api/login', async (req, res) => {
  const { username, password } = req.body
  const user = await User.findOne({ where: { username } })

  const passwordCorrect = password === 'secret' // Simulate password check

  if (!(user && passwordCorrect)) {
    return res.status(401).json({ error: 'invalid username or password' })
  }

  const userForToken = {
    username: user.username,
    id: user.id
  }

  const token = jwt.sign(userForToken, SECRET)

  res.status(200).send({ token, username: user.username, name: user.name })
})

// Error handling middleware
app.use(errorHandler)

// 7. Start the server
const start = async () => {
  await connectToDatabase()
  app.listen(PORT, () => {
    console.log(`Server running on port ${PORT}`)
  })
}

start()
